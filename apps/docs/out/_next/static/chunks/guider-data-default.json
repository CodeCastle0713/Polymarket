{"/docs/config/guide/why-neat-config":{"sections":[{"heading":{"id":"why-use-neato-config","depth":1,"text":"Why use @neato/config"},"content":"Load from multiple file formats (.env, .json). Load from environment variables. Allows for nested configuration. Type-safe through Zod's or joi's schema validation. Combine many sources into one configuration object. Partial presets through premade configuration fragments. Naming agnostic, use any naming convention. Freeze your configuration, prevent it from being changed at runtime."},{"heading":{"id":"installation","depth":2,"text":"Installation"},"content":" Let's get started with @neato/config. First lets install the package. Thats it! Next up:  find out how to use the library."}],"pageTitle":"Why use @neato/config"},"/docs/config/guide/usage":{"sections":[{"heading":{"id":"usage","depth":1,"text":"Usage"},"content":"Loading basic configuration is very simple.\r\nSimply make a file in your project with any name, for this example we use config.ts. Then just import createConfigLoader and call it. You can call any option on the builder at that point. The moment you call load() on your builder. it will return your configuration that has been loaded. See the following example to load from environment variables."},{"heading":{"id":"about-variable-naming","depth":2,"text":"About variable naming"},"content":" The loaders are naming convention agnostic. It will normalize all variable names (keys) before loading them into an object. To illustrate, here is an example how names are converted, the following keys are loaded in with default settings: HELLO_WORLD -> helloWorld HelloWorld -> helloWorld HELLO-WORLD -> helloWorld hello_world -> helloWorld Hello_World -> helloWorld hello-world -> helloWorld Helloworld -> helloworld"},{"heading":{"id":"nested-values-inside-key-value-environments","depth":2,"text":"Nested values inside key-value environments"},"content":" In some cases, you cannot represent complex objects in the format. For example, environment variables.\r\nFor those cases you can use double underscores (__) to specify a nesting level. For example:"}],"pageTitle":"Usage"},"/docs/config/guide/installation":{"sections":[{"heading":{"id":"installation","depth":1,"text":"Installation"},"content":"Let's get started with @neato/config. First lets install the package. Thats it! Next up:  find out how to use the library."}],"pageTitle":"Installation"},"/docs/config/guide/basic-example":{"sections":[{"heading":{"id":"basic-example","depth":1,"text":"Basic example"},"content":"See the code snippet below for a usual setup in projects"}],"pageTitle":"Basic example"},"/docs/config/misc/security":{"sections":[{"heading":{"id":"security","depth":1,"text":"Security"},"content":"This configuration library trusts all sources of configuration.\r\nThat means any files, environment or directories you load in are treated as a trusted source. Do not ever allow untrusted files to be loaded into the application using this library."}],"pageTitle":"Security"},"/docs/config/misc/changelog":{"sections":[{"heading":{"id":"changelog","depth":1,"text":"Changelog"},"content":""},{"heading":{"id":"v-3-0-0-error-handling","depth":2,"text":"V3.0.0 - Error handling"},"content":"BREAKING CHANGE: Errors now have proper types, does not throw but uses process.exit. BREAKING CHANGE: Env files now handle quotes as you would expect. Using dotenv for parsing. BREAKING CHANGE: Frozen configs are now default, To opt out, you can do .unfreeze().  Read more about freezing here. Errors are now logged with pretty colors and will exit the process by default.  Read more about errors here. A new zod helper for easier boolean schemas: zodCoercedBoolean.  Read more about it here."},{"heading":{"id":"v-2-0-0-file-loader-prefixes-freezing","depth":2,"text":"V2.0.0 - File loader prefixes & freezing"},"content":" BREAKING CHANGE: file loaders now take a options argument Make your configuration readonly with .freeze().  Read more about freezing here. Strip prefixes from .env files.  Read more about file loader prefixes here."},{"heading":{"id":"v-1-1-0-documentation-zod-schemas","depth":2,"text":"V1.1.0 - Documentation & zod schemas"},"content":" Schema validation with zod: .addZodSchema(schema) (supports type inference) Documentation is now available (you're current reading it)"},{"heading":{"id":"v-1-0-0-initial-release","depth":2,"text":"V1.0.0 - Initial release"},"content":" .env file loader, with comment support .json file loader name convention agnostic, can set naming convention or uses the schema's Fragment support - which are like partial configuration snippets Load from environment Load from CLI arguments Load from directory structure Schema validation using joi"}],"pageTitle":"Changelog"},"/docs/config/api/utils":{"sections":[{"heading":{"id":"utilities","depth":1,"text":"Utilities"},"content":"Some helpers that can help you make configuration easier."},{"heading":{"id":"zod-coerced-boolean","depth":2,"text":"zodCoercedBoolean()"},"content":" Since z.coerce.boolean() is just doing `Boolean(value) under the hood. You get weird cases like these: z.coerce.boolean().parse(\"true\"); // => true; z.coerce.boolean().parse(\"false\"); // => true; z.coerce.boolean().parse(\"yes\"); // => true; z.coerce.boolean().parse(\"no\"); // => true; z.coerce.boolean().parse(\"\"); // => false; If you use zodCoercedBoolean() instead of z.boolean(), things will be more as you expect them to be.\r\nHere is a list of valid values, these are checked while ignoring casing (if its a string): \"true\" -> true \"yes\" -> true true -> true \"false\" -> false \"no\" -> false false -> false any other values will be read as false"}],"pageTitle":"Utilities"},"/docs/config/api/schemas":{"sections":[{"heading":{"id":"schemas","depth":1,"text":"Schemas"},"content":"To make sure your configuration is exactly the shape you want, you will need to add a schema.\r\nThis is entirely optional but highly recommended. By using a schema, all loaded configuration keys will be inserted in the naming conventation that your schema definition uses.  It will stop using the configured naming convention and instead use the schema's, See formatting for more information on naming conventions."},{"heading":{"id":"add-zod-schema-schema","depth":2,"text":".addZodSchema(schema)"},"content":" This schema parser takes a Zod schema. It will validate the configuration using the schema before returning the config. It will also run any transformations the schema definition has."},{"heading":{"id":"add-joi-schema-schema","depth":2,"text":".addJOISchema(schema)"},"content":" This schema parser takes a JOI schema. It will validate the configuration using the schema before returning the config. It will also run any transformations the schema definition has. You should use the generic argument in Joi.object<T>() to give your schema a type. We recommend using Zod schemas instead, as types are fully infered from the schema. No need to create both the schema and type definition."}],"pageTitle":"Schemas"},"/docs/config/api/loaders":{"sections":[{"heading":{"id":"loaders","depth":1,"text":"Loaders"},"content":"Discover all the ways you can load from a configuration source."},{"heading":{"id":"add-from-environment-prefix","depth":2,"text":".addFromEnvironment(prefix?)"},"content":" This loader takes from process.env and parses all keys into a complex object. Optionally, a prefix argument can be given to filter out keys that aren't relevant. For example, when you give it a prefix of NEATCONFIG_ then it will ignore keys like TERM=xterm-256color. And it will detect keys like NEATCONFIG_HELLO=world  and strip the prefix before parsing. So that the key will become { hello: \"world\" }. Prefixes will be stripped, they are not included in the final result."},{"heading":{"id":"add-from-file-path-options","depth":2,"text":".addFromFile(path, options?)"},"content":" This loader can load any of the supported file types (.env, .json).\r\nIt will try to use the file extension to determine how to parse the file, you can manually choose the parser by using the type key in the options. In the options you can also specify a prefix, which works the same as in addFromEnvironment(). Some details on implementation: The path is relative to your current working directory. The .env file loader supports comments with #. The .json file loader does not support prefix stripping."},{"heading":{"id":"add-from-directory-path-options","depth":2,"text":".addFromDirectory(path, options?)"},"content":" This loader loads in data from a directory structure, the filename is used as the key and the contents of the file is the value. In the options you can specify a prefix, which works the same as in addFromEnvironment(). The path is relative to your current working directory."},{"heading":{"id":"add-from-cli-prefix","depth":2,"text":".addFromCLI(prefix?)"},"content":" This loader can load in configuration keys from CLI arguments. In prefix parameter works the same as in addFromEnvironment(). The loader supports both --KEY=VALUE and the --KEY VALUE syntax for arguments."}],"pageTitle":"Loaders"},"/docs/config/api/fragments":{"sections":[{"heading":{"id":"fragments","depth":1,"text":"Fragments"},"content":"Fragments are great way to add partial presets for configuration.\r\nSome usecases include: Local development preset. Quick start configuration. Composable snippets of config. To start using it, add a few fragments and choose a fragment key.\r\nSee below for more details."},{"heading":{"id":"add-config-fragment-name-fragment","depth":2,"text":".addConfigFragment(name, fragment)"},"content":" This option adds a fragment, using the first parameter as its identifier."},{"heading":{"id":"add-config-fragments-fragments","depth":2,"text":".addConfigFragments(fragments)"},"content":" This option adds multiple fragments. For every entry, the key is used as the fragment name and the value being the fragment itself."},{"heading":{"id":"set-fragment-key-key","depth":2,"text":".setFragmentKey(key)"},"content":" This option sets the key that defines which fragments get loaded into the configuration. The key can come from any loaders. The value associated with key is a comma seperated list of fragments to load."}],"pageTitle":"Fragments"},"/docs/config/api/formatting":{"sections":[{"heading":{"id":"formatting","depth":1,"text":"Formatting"},"content":"Discover the ways to make your configuration exactly how you want to!"},{"heading":{"id":"set-naming-convention-convention","depth":2,"text":".setNamingConvention(convention)"},"content":" With this formatting option, you can setup a naming convention for all of your configuration items. By default camelCase is used. The convention parameter can be either one of our presets (see code snippet below), or a function ((segment: string) => string) that defines your own naming convention.\r\nKeys are passed in as SCREAMING_SNAKE_CASE with double underscores to indicate a nested level (FOO__BAR__BAZ). Configured naming conventions get overwritten if you use a schema."},{"heading":{"id":"unfreeze","depth":2,"text":".unfreeze()"},"content":" by default, Your configuration is deep frozen using recursive Object.freeze().\r\nThis means that you will get runtime errors when you try to assign anything, in typescript you will get a readonly type so you get compiler errors when trying to assign. If you use the unfreeze() option, your output configuration will not be frozen as described above."}],"pageTitle":"Formatting"},"/docs/config/api/errors":{"sections":[{"heading":{"id":"error-handling","depth":1,"text":"Error handling"},"content":"Configuration loading has some potentionally confusing error handling.\r\nBy default, it will use the \"pretty\" assertion mode.  This \"pretty\" mode will call process.exit(1) instead of throwing errors. That means that you aren't able to catch it with a try-catch block."},{"heading":{"id":"the-modes","depth":2,"text":"The modes"},"content":" pretty Log the errors in pretty formatting and colors, then exit the process. plain Log the errors in plain text, then exit the process. throw throw the errors where they occur."}],"pageTitle":"Error handling"},"/docs/guider/writing/markdown/making-pages":{"sections":[{"heading":{"id":"making-pages","depth":1,"text":"Making pages"},"content":"On this page, you will learn how to write content pages in Guider."},{"heading":{"id":"create-a-new-page","depth":2,"text":"Create a new page"},"content":" Guider uses file system routing from Next.JS, this means the folder structure of in your pages directory\r\ndirectly corresponds to the final URL of your page. A few examples: /pages/hello/world.mdx becomes example.com/hello/world /pages/goodbye/moon/index.mdx becomes example.com/goodbye/moon You can use both .md and .mdx extension for your content files."},{"heading":{"id":"linking-your-page-to-a-theme","depth":2,"text":"Linking your page to a theme"},"content":" In your theme file, you will have configured sites, directories and maybe layouts. If you only have one directory and site,\r\nthen there will be no need to link anything explicitly. If you have multiple sites or directories, you will need to specify which pages belong to which directory/site.\r\nIf unspecified, the first site and directory is chosen from your theme. You can choose a site/directory with a _meta.json file.\r\nIf you have a meta file inside of /pages/hello/_meta.json then it will apply to all pages starting with /hello. A example meta file: You can omit any field in this file and it will default to a upper level (like /pages/_meta.json) or just use the default. If you don't want to apply these settings to an entire directory but just a single page. You can also specify all options that are available in a meta file inside of the Frontmatter of the page: Just like the meta file, you can omit any field for it to default to an upper level."},{"heading":{"id":"creating-a-page-that-doesnt-use-mdx-or-md","depth":2,"text":"Creating a page that doesn't use MDX or MD"},"content":" If you want to run other pages that aren't related to your documentation, you can simply make .jsx or .tsx files in the pages directory. It will be a completely blank page by default, if you want to still use the general layout of a site. You can use <GuiderLayout />{:tsx} to make use of the standard layout."},{"heading":{"id":"writing-in-md-or-mdx","depth":2,"text":"Writing in MD or MDX"},"content":" Guider uses most of  GitHub Flavoured Markdown. If you are familiar with it, you can use everything you know. If you aren't familiar, you can refer to  Basic text to learn how to write in Markdown."}],"pageTitle":"Making pages"},"/docs/guider/writing/markdown/lists":{"sections":[{"heading":{"id":"lists","depth":1,"text":"Lists"},"content":"Lists in Markdown are very easy to write, they are essential in writing organised content."},{"heading":{"id":"ordered-list","depth":2,"text":"Ordered list"},"content":" To write an ordered list, add a number with a dot after it followed by your text.\r\nNote that you don't have to make the numbers be in order, Guider will make it be in order for you. Item one Item two Item three"},{"heading":{"id":"unordered-list","depth":2,"text":"Unordered list"},"content":" To write an unordered list, add a dashes, followed by your text. Alternatively you can use any of these characters instead as prefix: -, *, + Item one Item two Item three"},{"heading":{"id":"nesting-lists","depth":2,"text":"Nesting lists"},"content":" To make lists indented, you add extra spaces or tabs into the nested lists. Just make sure that they align vertically and they will nest automatically. Item one Item two Item two/one Item two/two Item three"}],"pageTitle":"Lists"},"/docs/guider/writing/markdown/code-blocks":{"sections":[{"heading":{"id":"code-blocks","depth":1,"text":"Code blocks"},"content":"If you're writing technical documentation, code blocks are essential. This is why Guider code blocks are jam-packed with features."},{"heading":{"id":"basic-code-block","depth":2,"text":"Basic code block"},"content":" Code blocks are very easy to write in Markdown. Simply wrap your code in 3 backticks (```) in front and 3 after.\r\nOptionally you can specify a programming language directly after the first 3 backticks for the code to be syntax highlighted. In Guider, the programming language is shown top right of the codeblock. Hovering over a codeblock will show a copy button. For syntax highlighting, we make use of  Shiki. You can find a list of  supported languages here."},{"heading":{"id":"inline-code","depth":2,"text":"Inline code"},"content":" In the case where you want to display single line of code inside of a normal paragraph, instead of an entire code block.\r\nYou can use inline code blocks. Simply wrap some text in backticks (`) To add syntax highlighting for a programming language to your inline codeblock. You can end your inline code with {:LANGUAGE}{:txt}. For example this line of javascript (js): import hello from \"world\";{:js}."},{"heading":{"id":"titled-code-blocks","depth":2,"text":"Titled code blocks"},"content":" You can add a title to a codeblock by simply adding the annotation title=\"my-file.txt\". The double quotes are required."},{"heading":{"id":"line-numbers","depth":2,"text":"Line numbers"},"content":" To add line numbers to your code block, add the attribute showLineNumbers to your code block."},{"heading":{"id":"highlight-words","depth":2,"text":"Highlight words"},"content":" To highlight specific words or phrases, add the /xxx/ annotation to your code block. In the case that you want to start highlighting at a specific point and not everything. You can add a comment with [!code word:xxx].\r\nIf you want it to highlight multiple, you can specify an amount like so: [!code word:xxx:3] (it won't count on the line itself)."},{"heading":{"id":"highlight-lines","depth":2,"text":"Highlight lines"},"content":" At times, highlighting entire lines can be useful. There are a handful of choices here: // [\\!code --] - mark line as removed // [\\!code ++] - mark line as added // [\\!code highlight] - highlight line // [\\!code error] - show an error background on the line // [\\!code warning] - show an warning background on the line You can add this at the end of any line of code in your code block to apply the style to the line.  Make sure to remove the slash from the examples. If you want to apply line highlighting to multiple lines, you can also add it as an annotation {1,3-5}. This will apply to line 1 and the range 3 until 5 (inclusive)"},{"heading":{"id":"focus-lines","depth":2,"text":"Focus lines"},"content":" When you have a bunch of code for completeness, but most of it is not relevant to the example. You have the option to focus only the lines you want.\r\nSimply add [!code focus] in a comment at the end of your lines that you want to focus."},{"heading":{"id":"npm-integration","depth":2,"text":"NPM integration"},"content":" A nice little utility provided by The Guild called  @theguild/remark-npm2yarn can\r\nhelp you show your NPM install command in other package managers. This only works with npm install commands, not any other subset of commands like npx or npm run"}],"pageTitle":"Code blocks"},"/docs/guider/writing/markdown/basic-text":{"sections":[{"heading":{"id":"basic-text","depth":1,"text":"Basic text"},"content":"Learn the basics of Markdown through this simple guide."},{"heading":{"id":"paragraphs","depth":2,"text":"Paragraphs"},"content":" Writing paragraphs in markdown is very easy, you just write a line of text. If you want to start a new paragraph, make sure you add  two newlines instead of one."},{"heading":{"id":"titles","depth":2,"text":"Titles"},"content":" All Section titles show up in the Table of Contents on the right."},{"heading":{"id":"text-formatting","depth":2,"text":"Text formatting"},"content":" Almost all markdown formatting is supported in Guider, simply wrap your text in the appropiate symbols. Formatting Markdown down Result Bold **Bold** BoldItalic _Italic_ ItalicStrikethrough ~Strikethrough~ StrikethroughSuperscript <sup>Superscript</sup> SuperscriptSubscript <sub>Subscript</sub> SubscriptYou can combine multiple styles. For example **_Bold and italic_** to get  Bold and italic."},{"heading":{"id":"linking-to-other-pages","depth":2,"text":"Linking to other pages"},"content":" You can link to other pages simply by wrapping your text in [](). For example, to link to an external website you would write [Example](https://example.com) which would look like\r\nthis:  Example. If you need to link to other internal pages you can write [Link text](../page-a) or the full path: [link text](/docs/page-b)."}],"pageTitle":"Basic text"},"/docs/guider/writing/components/tabs":{"sections":[{"heading":{"id":"tabs","depth":1,"text":"Tabs"},"content":"If you would like different variants or subsections to be toggleable, the tab element may be your best fit."},{"heading":{"id":"general-usage","depth":2,"text":"General usage"},"content":" Tabs are made by wrapping each tab's content in a <Tabs.Tab>{:tsx} element. All tabs are then enclosed in a container element (<Tab>{:tsx}). The container element needs a list of navigation items that match the number of tabs. For example: <Tab items={[\"Item A\", \"Item B\", \"Item C\"]}>{:tsx}. See the full example below. You can put any content inside of a tab, so don't feel restricted to just text. Tab A Tab B Tab C"},{"heading":{"id":"default-tab","depth":2,"text":"Default tab"},"content":" You can set a default tab which is the tab that is selected before the reader chooses a specific one. The counter starts at 0. This means the first tab is index 0, the second tab index 1 and so on. Tab A Tab B Tab C"},{"heading":{"id":"storing-the-tab-choice","depth":2,"text":"Storing the tab choice"},"content":" By default, the reader's tab choice is not persistent. When they switch to a different page, the tab choice is forgotten and next time they visit the page it will be the default again. If you would like the user's choice to be stored, you can give a storageKey prop.  If you give two or more tabs the same storage key, it will synchronize the tabs. Switching tab on one will also switch on the others.Tab A Tab B Tab C"},{"heading":{"id":"component-api-tabs","depth":2,"text":"Component API - <Tabs />"},"content":" The Tabs component The tab items, must have the same number of items as there are tabs. The storage key, to store the preferences under. See  this section for usage. The tabs to display."},{"heading":{"id":"component-api-tabs-tabs","depth":2,"text":"Component API - <Tabs.Tabs />"},"content":" A Tabs item can only be a child of a <Tabs />{:tsx}. The contents of this Tab."}],"pageTitle":"Tabs"},"/docs/guider/writing/components/steps":{"sections":[{"heading":{"id":"steps","depth":1,"text":"Steps"},"content":"If you have a number of steps for a reader to follow, the steps component is a great choice."},{"heading":{"id":"general-usage","depth":2,"text":"General usage"},"content":" You can make steps by making a container <Steps>{:tsx} component with any number of <Steps.Step>{:tsx} inside them. You can put any content inside of a step, so don't feel restricted to just text. Steps work great with a level 3 heading as the first element."},{"heading":{"id":"step-one","depth":3,"text":"Step one"},"content":" Step content goes here"},{"heading":{"id":"step-two","depth":3,"text":"Step two"},"content":" Step content goes here"},{"heading":{"id":"component-api-steps","depth":2,"text":"Component API - <Steps />"},"content":" The base Steps component only has some children, no specific props. The individual steps that should be displayed."},{"heading":{"id":"component-api-steps-step","depth":2,"text":"Component API - <Steps.Step />"},"content":" An individual step component only has some children, no specific props. The contents of the Step."}],"pageTitle":"Steps"},"/docs/guider/writing/components/frames":{"sections":[{"heading":{"id":"frames","depth":1,"text":"Frames"},"content":"Frames are a good way to showcase UI components, images or basically anything that needs to be framed."},{"heading":{"id":"general-usage","depth":2,"text":"General usage"},"content":" Frames are super simple to use, simply wrap your content in a <Frame>{:tsx} component. See the example below: Hello world"},{"heading":{"id":"prevent-centering","depth":2,"text":"Prevent centering"},"content":" If you don't want something to be centered. You can wrap your content in <div style={{ width: '100%'}}>{:tsx} before putting it in a frame: Hello world"},{"heading":{"id":"component-api-frame","depth":2,"text":"Component API - <Frame />"},"content":" The Frame component. Boolean property on the style of the frame. Set to true to remove the background grid. The content of the frame."}],"pageTitle":"Frames"},"/docs/guider/writing/components/fields":{"sections":[{"heading":{"id":"fields","depth":1,"text":"Fields"},"content":"Fields are great for when you have to display any type structure.\r\nThey can work for API reference, API fields, query paramaters, component props, and much more."},{"heading":{"id":"general-usage","depth":2,"text":"General usage"},"content":" Make a field by just making a <Field />{:tsx} component. You will need to specify its type and it's name, and optionally also if it's a required field. You can also use the <Field.Properties />{:tsx} component to group properties on a nested field. See the example below: This is an example field. This is an example field with nested properties This is an example nested field. This is a second example nested field."},{"heading":{"id":"component-api-field","depth":2,"text":"Component API - <Field />"},"content":" A field with a type display, great for documenting types or structures. The title of the field. The type of the field. Mark this field as required. The description of the field, you can use markdown freely in here."},{"heading":{"id":"component-api-field-properties","depth":2,"text":"Component API - <Field.Properties />"},"content":" A collapsable group of fields, good for showcasing nested objects. The contents of the collapsable section, it's recommended to only put field components in here. Boolean indicating if it should be opened by default. The text that shows when you need to show or hide the contents of the collapsable section."}],"pageTitle":"Fields"},"/docs/guider/writing/components/custom":{"sections":[{"heading":{"id":"custom-components","depth":1,"text":"Custom components"},"content":"Custom components are a way to taylor your documentation to your product."},{"heading":{"id":"making-a-custom-component","depth":2,"text":"Making a custom component"},"content":" Since Guider uses  MDX, you can use any React components in your pages. Here is an example of a simple custom component: Learn how to make React components with this  official React guide"}],"pageTitle":"Custom components"},"/docs/guider/writing/components/code-groups":{"sections":[{"heading":{"id":"code-groups","depth":1,"text":"Code groups"},"content":"Code groups are a great way to group multiple codeblocks together, for example when\r\nyou need to showcase multiple files. It's also a great way to show previews of code."},{"heading":{"id":"general-usage","depth":2,"text":"General usage"},"content":" To make a code group, simply add a <CodeGroup>{:tsx} component, with any number of <CodeGroup.Code>{:tsx} inside it. The <CodeGroup.Code>{:tsx} will need a title and should only contain codeblocks or <Frame>{:tsx} components. Only put in one codeblock or <Frame>{:tsx} inside at a time."},{"heading":{"id":"combining-with-frames","depth":2,"text":"Combining with Frames"},"content":" Codegroup children can also contain <Frame> components. See the example below. Hello world"},{"heading":{"id":"component-api-code-group","depth":2,"text":"Component API - <CodeGroup />"},"content":" The base component, has no props other than children The items of the CodeGroup."},{"heading":{"id":"component-api-code-group-code","depth":2,"text":"Component API - <CodeGroup.Code />"},"content":" The CodeGroup item, can only be a child of a <CodeGroup />{:tsx}. The title of this CodeGroup item, will be displayed as the tab name. The contents of this CodeGroup item. Must be a codeblock or a <Frame />{:tsx}"}],"pageTitle":"Code groups"},"/docs/guider/writing/components/callouts":{"sections":[{"heading":{"id":"callouts","depth":1,"text":"Callouts"},"content":"Need to make the reader aware of something in context to your documentation? Callouts are a nice looking way to do so."},{"heading":{"id":"general-usage","depth":2,"text":"General usage"},"content":" Callouts are usually contain a sentence or two, but they aren't that limited.\r\nYou can put any content in callouts: headings, multiple paragraphs, bold text and even custom components."},{"heading":{"id":"a-note","depth":2,"text":"A note"},"content":" Notes are good for adding extra information that may not fit in a sentence."},{"heading":{"id":"an-important-callout","depth":2,"text":"An important callout"},"content":" Important callouts are great for conveying an important extra step"},{"heading":{"id":"a-tip","depth":2,"text":"A tip"},"content":" Tips are amazing for giving helpful shortcuts"},{"heading":{"id":"a-warning","depth":2,"text":"A warning"},"content":" Warnings are splendid to convey edgecases or unexpected behaviour"},{"heading":{"id":"a-caution","depth":2,"text":"A caution"},"content":" Cautions are superb to get the readers attention to something critical"},{"heading":{"id":"general-component","depth":2,"text":"General component"},"content":" In case you need to dynamically change the type of the callout, you can use the <Callout>{:tsx} component. You can specify the type prop to set the style."},{"heading":{"id":"component-api-callout","depth":2,"text":"Component API - <Callout />"},"content":" The general component API, the more specific versions don't have any props. The type and style of the callout, can be any of the following: warning, note, important, caution, tip The contents of the callout, you can use markdown freely in here."}],"pageTitle":"Callouts"},"/docs/guider/writing/advanced/tables":{"sections":[{"heading":{"id":"tables","depth":1,"text":"Tables"},"content":"Tables are useful to display structured data."},{"heading":{"id":"basic-table","depth":2,"text":"Basic table"},"content":" Tables in Guider use the standard  markdown syntax. You can use any inline styling\r\ninside of tables such as inline code, bolding and italics. Name Hobby John Ultimate Frisbee Jane Building Guitars Mark Experimenting with very wet bread dough You can make cell widths different sizes, the output will be the same: Need to use the pipe symbol (|) inside your table? Prefix it with a backslash (\\) to make it count as cell content instead of a divider."},{"heading":{"id":"empty-headers","depth":2,"text":"Empty headers"},"content":" Table headers in markdown are required, but if you leave them completely empty (only spaces). Guider will hide the header row for you. John Ultimate Frisbee Jane Building Guitars Mark Experimenting very wet bread dough"},{"heading":{"id":"alignment","depth":2,"text":"Alignment"},"content":" You can align the contents of a column in a specific direction by adding a colon (:) to the left, right or both sides of the hyphens in the header row. Left Center Right Lorem Ipsum Dolor Sit Samet Elit"}],"pageTitle":"Tables"},"/docs/guider/writing/advanced/quotes":{"sections":[{"heading":{"id":"quotes","depth":1,"text":"Quotes"},"content":"Learn how to add quote blocks to your documentation."},{"heading":{"id":"basic-quotes","depth":2,"text":"Basic quotes"},"content":" To create a quote block, simply add a > in front of your text. Lorem ipsum dolor sit amet, consectetur adipiscing elit."},{"heading":{"id":"multi-line-quotes","depth":2,"text":"Multi-line quotes"},"content":" Creating multi-line quotes is just as easy as normal quotes. Just keep adding more > add the start of the lines. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Donec non dapibus mauris."}],"pageTitle":"Quotes"},"/docs/guider/writing/advanced/footnotes":{"sections":[{"heading":{"id":"footnotes","depth":1,"text":"Footnotes"},"content":"Learn how to add footnotes to your documentation."},{"heading":{"id":"the-syntax","depth":2,"text":"The syntax"},"content":" You can add footnotes to your page with a bracket syntax. Add [^1]{:md} somewhere in your text, and somewhere else you can add a line [^1]: My reference{:md} to add content to the footnote. As Linus Torvalds once said:\r\n\"Most of the good programmers do programming not because they expect to get paid or get adulation by the public, but because it is fun to program.\". Interview with Linus Torvalds on what motivates software developers. The position of the footnote does not matter, it is always shown at the bottom of your page."}],"pageTitle":"Footnotes"},"/docs/guider/writing/advanced/dividers":{"sections":[{"heading":{"id":"dividers","depth":1,"text":"Dividers"},"content":"Learn how to add divider lines to your documentation."},{"heading":{"id":"the-syntax","depth":2,"text":"The syntax"},"content":" Dividers can be a nice way to section up your content outside of just headings. Thankfully markdown has a very easy syntax to make dividers. If you add three or more asterisks (***), dashes (---) or underscores (___). A divider will appear. Some text More text Even more text Final text Make sure to add blank lines around a divider. If a divider is directly under a paragraph, the paragraph will be interpreted as a heading."}],"pageTitle":"Dividers"},"/docs/guider/guides/getting-started/installation":{"sections":[{"heading":{"id":"getting-started-with-guider","depth":1,"text":"Getting started with Guider"},"content":"Guider is built on top of Next.JS, this gives you the flexibilty to include\r\nit as part of a normal React app built with Next.JS. Get started with @neato/guider project in under 5 minutes."},{"heading":{"id":"installation","depth":2,"text":"Installation"},"content":" Follow the steps below to make a new Guider project."},{"heading":{"id":"run-the-automatic-installer","depth":3,"text":"Run the automatic installer"},"content":" Start the installer by running this command:"},{"heading":{"id":"install-dependencies","depth":3,"text":"Install dependencies"},"content":" Navigate to the directory the installer made and run the following:"},{"heading":{"id":"ready-to-write","depth":3,"text":"Ready to write!"},"content":" Your project has been fully setup, all that's left is to fill it with content. Run the developer server with npm run dev{:sh} and see the first page by visiting the link shown in the console. The Next.JS development server is infamous for being slow. The final build of the site will be  much faster."},{"heading":{"id":"create-a-next-js-project-and-install-guider","depth":3,"text":"Create a Next.JS project and install Guider"},"content":" To install a Next.JS project with guider, install the following dependencies: then add the following scripts to your package.json:"},{"heading":{"id":"add-a-next-js-config","depth":3,"text":"Add a Next.JS config"},"content":" Create or replace the following next.config.mjs file in your project's root directory."},{"heading":{"id":"create-a-theme-config","depth":3,"text":"Create a theme config"},"content":" Next, create a theme.config.tsx. This will be the home for all of your configuration and customization of Guider:"},{"heading":{"id":"create-entrypoint-files","depth":3,"text":"Create entrypoint files"},"content":" Finally, create two files pages/_app.tsx and pages/404.tsx. They should be in your pages directory.\r\nThe app file is to setup the layout system and styled for Guider. The 404 file holds a preset \"page not found\" view, feel free to customize it."},{"heading":{"id":"setup-typescript","depth":3,"text":"Setup typescript"},"content":" To make Guider work, you will need to slightly modify your tsconfig.json. If you don't have a tsconfig.json file yet, just make one at the root of your project. If you do already have typescript, you can just change the single option in your existing config."},{"heading":{"id":"ready-to-write-documentation","depth":3,"text":"Ready to write documentation!"},"content":" Your project has been fully setup, all that's left is to fill it with content. Try it out by making a file in your pages directory: And run with npm run dev{:sh} and see your first page by visiting the link shown in the console. The Next.JS development server is infamous for being slow. The final build of the site will be  much faster."},{"heading":{"id":"whats-next","depth":2,"text":"What's next?"},"content":" You have everything setup now. To get acquainted with Guider. You can take the follow steps: Learn how to  setup navigation. Check out the basics of  writing content. Find out how to  deploy your site."}],"pageTitle":"Getting started with Guider"},"/docs/guider/guides/getting-started/development":{"sections":[{"heading":{"id":"development","depth":1,"text":"Development"},"content":"This guide goes over some tips to get the optimal developer experience for writing your documentation."},{"heading":{"id":"running-the-development-server","depth":2,"text":"Running the development server"},"content":" After you've gone through the installation process, all you need to do get up and running is\r\nrun the dev script with your favourite package manager. For an example with NPM: The Next.JS development server is infamous for being slow. The final build of the site will be  much faster."},{"heading":{"id":"building-for-production","depth":2,"text":"Building for production"},"content":" To build your production build, you can run npm run build{:sh} (or use your favourite package manager). This will create a folder called out that holds the final build that's ready for deployment. If you want to preview it, you can run npx run serve out to spin up a temporary HTTP server that serves the out folder."},{"heading":{"id":"autocomplete-and-syntax-highlighting-for-mdx-files","depth":2,"text":"Autocomplete and syntax highlighting for MDX files"},"content":" By default, most code editors will not support MDX files. To add support, you can install the MDX extensions: For JetBrains editors, you can use the JetBrains maintained  MDX plugin. For VSCode, you can install the  MDX extension maintained by the MDX team."}],"pageTitle":"Development"},"/docs/guider/guides/config/theming":{"sections":[{"heading":{"id":"colors-theme","depth":1,"text":"Colors & theme"},"content":"Guider has been designed fit almost any use case for documentation.\r\nNaturally, this means that there are lots of configuration options to provide the flexibility Guider offers. Usually, the first thing to change is the branding."},{"heading":{"id":"introduction-to-layout-settings","depth":2,"text":"Introduction to layout settings"},"content":" Layout settings can be modified on three layers, each one overriding settings from a previous layer. The layers are as follows: Site layout settings: The base layer of layout settings is simply on Site.settings. Layout settings: The second layer that counts is on a layout itself at Layout.settings. Directory layout settings: The last layer is on a directory at Directory.settings. All of these layers are resolved in order. So if you have something specified on the directory layer, it will overwrite all other layers.\r\nIf you specify something on the layout layer, it will overwrite the site layer but not the directory layer. In this example, the final result will be toc == false{:ts} because the directory settings have the highest priority and sidebar == true{:ts} because the settings in layouts are a higher priority than the site settings."},{"heading":{"id":"changing-colors","depth":2,"text":"Changing colors"},"content":" Now that you know how layout settings are resolved. We can start customising the colors and other layout settings:"},{"heading":{"id":"changing-the-logo","depth":2,"text":"Changing the logo"},"content":" If just want to modify the site name and homepage link, you can simple change it in site configuration: If you want to fully customize how your logo looks (For example, using an image as your logo), you can overwrite the full partial in  any settings layer:"},{"heading":{"id":"enabling-the-background-pattern","depth":2,"text":"Enabling the background pattern"},"content":" You can optionally enable a fancy looking background pattern. It uses your configured primary colors. There are currently no other options other than flare and just having it disabled."},{"heading":{"id":"want-to-build-a-theme","depth":2,"text":"Want to build a theme?"},"content":" Give the color wheel a spin and generate a theme for your documentation. If you want more freedom, you can also use this as a base for you main theme and just customize where neccesary."}],"pageTitle":"Colors & theme"},"/docs/guider/guides/config/seo":{"sections":[{"heading":{"id":"seo-meta-tags","depth":1,"text":"SEO & Meta tags"},"content":"SEO is important to make your docs discoverable by search engine. By default, Guider does not provide much metadata. However it does make it very easy to add them through  Next SEO."},{"heading":{"id":"the-basics","depth":2,"text":"The basics"},"content":" Page titles and descriptions can be set by creating a  frontmatter section at the top of your MDX file. Both title and description are optional. If there are not specified, the title will be the first heading on the page and the description will be the first paragraph on the page."},{"heading":{"id":"adding-custom-meta-tags","depth":2,"text":"Adding custom meta tags"},"content":" If you want to add more meta tags, you can do so by passing an object to the site options. You can check all the different options on the  Next SEO Options page. In the case that you need more flexibility in meta tags or need to add  JSON-LD, you can provide a function that returns a component, which can make use of the useGuiderPage() hook.\r\nYou will need to install next-seo into your project to use this method. As the only parameter, default meta tags are passed into your function. When you're using a function to render the meta tags, the default meta tags aren't added. You will need to add them yourself as shown in the example."}],"pageTitle":"SEO & Meta tags"},"/docs/guider/guides/config/redirects":{"sections":[{"heading":{"id":"redirects","depth":1,"text":"Redirects"},"content":"Sometimes, you want to redirect from a link to a page. For example, redirecting from /docs to an actual page like /docs/getting-started. Next.JS does not provide an easy way if you render as a static site. So Guider has a simple tool to orchestrate redirects."},{"heading":{"id":"creating-a-redirect","depth":2,"text":"Creating a redirect"},"content":" The createRedirect function can make a page that simply redirects to another page.\r\nSo for example above, you would make a docs/index.mdx file with the following: Some hosting platforms like Netlify or Cloudflare Pages can give you more control over redirects with a _redirects file.\r\nThis is preferable over createRedirect since it uses HTTP redirection instead of Javascript."}],"pageTitle":"Redirects"},"/docs/guider/guides/config/navigation":{"sections":[{"heading":{"id":"navigation","depth":1,"text":"Navigation"},"content":"Guider has many possibilities in navigation. This page will go through\r\nall methods and how to use them to their full potentional."},{"heading":{"id":"filling-the-sidebar","depth":2,"text":"Filling the sidebar"},"content":" The sidebar is the most expressive out of all the navigation structures. You can use the following components, all of which are imported from @neato/guider/theme. link(){:ts}: A standard sidebar link with optional icon. link.nested(){:ts}: A nested link, it's collapsable by the user. group(){:ts}: A group or section, used for visual hierarchy. separator(){:ts}: A plain & simple line. component(){:ts}: A custom component, you can render any React component in here. Groups can contain any other components except another group. Nested links can only contain normal links and separators. Here is an example that uses every component. This sidebar configuration will\r\nneed to be added to the directory of your choosing."},{"heading":{"id":"adding-links-to-the-header","depth":2,"text":"Adding links to the header"},"content":" Adding links to the navigation bar is quite easy. You can use the following components, all of which are imported from @neato/guider/theme. link(){:ts}: A standard link with optional icon. separator(){:ts}: A plain & simple line. You can configure the top navigation per site. Here is an example that uses every component:"},{"heading":{"id":"adding-tabs","depth":2,"text":"Adding tabs"},"content":" Sometimes you want to split up your documentation site into multiple sections. As an example, you can split it up between \"Documentation\" and \"API reference\". That's a perfect case for tabs. You can use the following components, all of which are imported from @neato/guider/theme. link(){:ts}: A standard tab with optional icon. component(){:ts}: A custom component, you can render any React component in here. You can configure tabs per site, here is an example that uses every component:"},{"heading":{"id":"a-dropdown-for-your-sites","depth":2,"text":"A dropdown for your sites"},"content":" In cases where you have multiple projects, all with seperate documentation sites, the dropdown may be a better fit than links in the top navigation. You can use the following components, all of which are imported from @neato/guider/theme. link(){:ts}: A standard dropdown with optional icon. You can configure the dropdown per site, here is an example that uses every component:"}],"pageTitle":"Navigation"},"/docs/guider/guides/config/landing":{"sections":[{"heading":{"id":"landing-page","depth":1,"text":"Landing page"},"content":"Landing pages are a good way to introduce your project without going directly into the documentation.\r\nOn this page you will learn how to make a landing page or use a preset."},{"heading":{"id":"creating-a-basic-landing-page","depth":2,"text":"Creating a basic landing page"},"content":" To make a landing page (or any page that isn't MDX for that matter), you will first need to wrap it in a <GuiderLayout />{:tsx} component. If you want the layout to belong to a specific layout or site, you can specify it the meta prop - this is completely optional. It accepts the same data as the Frontmatter from a page. You can add any content you need inside of the <GuiderLayout />{:tsx} component."},{"heading":{"id":"use-premade-landing-page","depth":2,"text":"Use premade landing page"},"content":" In the case that you don't want to put in extra effort into making a landing page, you can opt for using our premade landing page: when making non-MDX pages, make sure you put it in a .tsx file instead of a .mdx file."}],"pageTitle":"Landing page"},"/docs/guider/guides/deploy/vercel":{"sections":[{"heading":{"id":"vercel","depth":1,"text":"Vercel"},"content":"A guide to deploy a Guider project to Vercel."},{"heading":{"id":"the-guide","depth":2,"text":"The guide"},"content":" Follow the steps below to deploy a Guider project on Vercel."},{"heading":{"id":"make-a-new-vercel-project","depth":3,"text":"Make a new Vercel project"},"content":" Go to  New project on Vercel, and select your repository."},{"heading":{"id":"configure-your-project","depth":3,"text":"Configure your project"},"content":" Configure the following fields: Project Name: Choose a fitting name. Framework Preset: Set it to Next.js. Root Directory: Make sure it matches to the root of your Guider project."},{"heading":{"id":"deploy","depth":3,"text":"Deploy"},"content":" Click the deploy button and wait until your site has been deployed. Vercel has linked this deploy with your branch, meaning that once new changes are pushed. Vercel will automatically update your site."}],"pageTitle":"Vercel"},"/docs/guider/guides/deploy/netlify":{"sections":[{"heading":{"id":"netlify","depth":1,"text":"Netlify"},"content":"A guide to deploy a Guider project to Netlify."},{"heading":{"id":"the-guide","depth":2,"text":"The guide"},"content":" Follow the steps below to deploy a Guider project to Netlify."},{"heading":{"id":"make-a-new-netlify-project","depth":3,"text":"Make a new Netlify project"},"content":" Go to  New site on Netlify, and select your repository."},{"heading":{"id":"configure-your-project","depth":3,"text":"Configure your project"},"content":" Configure the following fields: Site name: Choose a fitting name. Site to deploy: Set to Other (configure manually). Base directory: Set to the project directory, set to / if unsure. Build command: Set to npm run build (or your favourite package manager). Publish directory: Set to /out (prefix it with your project directory if it's not root)."},{"heading":{"id":"deploy","depth":3,"text":"Deploy"},"content":" Click the Deploy button and wait until your site has been deployed. Netlify has linked this deploy with your branch, meaning that once new changes are pushed. Netlify will automatically update your site."}],"pageTitle":"Netlify"},"/docs/guider/guides/deploy/github-pages":{"sections":[{"heading":{"id":"git-hub-pages","depth":1,"text":"GitHub Pages"},"content":"A GitHub Action to deploy a Guider documentation site."},{"heading":{"id":"prerequisites","depth":2,"text":"Prerequisites"},"content":" Enable GitHub Pages, go to Your repo > Settings > Pages and set Source to GitHub Actions."},{"heading":{"id":"the-workflow","depth":2,"text":"The workflow"},"content":" Add this code to a file in the github workflows folder, for example: /.github/workflows/docs-deploy.yml. There are highlighted words in the code, double check if those match your environment.\r\nThis code sample assumes you use npm, with the branch main as your release branch and the docs being in the root of your repository. This GitHub Action is activated on push of your release branch, meaning that once new changes are pushed. The action will automatically update your site."}],"pageTitle":"GitHub Pages"},"/docs/guider/guides/deploy/docker":{"sections":[{"heading":{"id":"docker","depth":1,"text":"Docker"},"content":"A Dockerfile to build a Guider documentation site container."},{"heading":{"id":"the-code","depth":2,"text":"The code"},"content":" Add the following code to a file called Dockerfile.  It has to be in the same location as your package.json.If you're running a monorepo or using private packages, this file won't help. You'll be on your own to figure it out.\r\nAlso if you're using a different package manager, you'll have to change the file to use your specific manager."}],"pageTitle":"Docker"},"/docs/guider/guides/deploy/cloudflare":{"sections":[{"heading":{"id":"cloudflare-pages","depth":1,"text":"Cloudflare Pages"},"content":"A guide to deploy a Guider project to Cloudflare Pages."},{"heading":{"id":"the-guide","depth":2,"text":"The guide"},"content":" Follow the steps below to deploy a Guider project to Cloudflare Pages."},{"heading":{"id":"make-a-new-application","depth":3,"text":"Make a new Application"},"content":" Go to  the Cloudflare dashboard on under \"Workers & Pages\" click \"Create application\"."},{"heading":{"id":"select-your-repository","depth":3,"text":"Select your repository"},"content":" On the \"Create application\" page, select the \"Pages\" tab. Choose a repository by pressing \"Connect to Git\" and then selecting it from the repository list."},{"heading":{"id":"configure-your-project","depth":3,"text":"Configure your project"},"content":" Configure the following fields: Project name: Choose a fitting name. Production branch: Select your release branch. Framework preset: Select \"Next.js (Static HTML Export)\" Build command: Set to npm run build (or your favourite package manager) Root directory (advanced): If you have your project in a subdirectory, set it here. otherwise leave empty."},{"heading":{"id":"deploy","depth":3,"text":"Deploy"},"content":" Click the Save and Deploy button and wait until your site has been deployed. Cloudflare has linked this deploy with your branch, meaning that once new changes are pushed. Cloudflare will automatically update your site."}],"pageTitle":"Cloudflare Pages"},"/docs/guider/guides/advanced/multi-site":{"sections":[{"heading":{"id":"running-multiple-sites","depth":1,"text":"Running multiple sites"},"content":"Managing big documentation sites or multiple at a time can be a challenge. On this page we talk about\r\nthe challenges and how to overcome them."},{"heading":{"id":"the-basics-of-running-multiple-sites","depth":2,"text":"The basics of running multiple sites"},"content":" Before we go over recommended techniques, let's first introduce the main method\r\non how to configure these sites. Sites in Guider don't neccesarily have completely seperate entities. Anything that is customized\r\nbeyond just the contents of the sidebar is a new site. Think of sites as just a new instance of a Guider site. A good use case of when to use a different site is if you want to have different content in the navigation header. Making new sites in Guider is thankfully very easy. Instead of just putting in one site configuration, you can enter an array:"},{"heading":{"id":"site-templates","depth":2,"text":"Site templates"},"content":" When you have many different sites that are mostly similar, it can be very verbose to reconfigure every site with the same settings. That is where site templates come in: you can make a template and any site can use a template as its base. You can provide multiple sites to extend from, they are merged in order of how they are passed in. Arrays in template sites are overwritten completely and do not get merged together.\r\nThe only exception to this is layouts, all layouts are included in the final result."},{"heading":{"id":"recommended-folder-structure","depth":2,"text":"Recommended folder structure"},"content":" Folder structure of your pages directory is completely flexible and up to the writer's choice.\r\nHowever, below we have some recommendations for bigger projects. Reserve a space for non-documentation: It's likely that big documentation sites will expand slightly outside of purely documentation.\r\nThink showcases, contact page, brand information. So it's wise to put your documentation on /docs so you can put everything else outside of it. Put your concepts all on one level: When you have multiple concepts like a list of libraries or a list of applications. You should put all of them\r\nin the same level. For example, for library shoejs, jacketjs and sockdotnet. You would have folders: /docs/shoejs, /docs/jacketjs and docs/sockdotnet.\r\nDo not group them as /docs/libs/xxx or /docs/apps/xxx, it will only make it harder to find in your project structure with less predictable URLs. Have a _meta.json file at the root of every concept: you should have a _meta.json file containing common configuration per concept.\r\nFollowing the previous examples, put one at /docs/shoejs/_meta.json. with { \"site\": \"shoejs\" }{:json}. Have a theme.config.tsx file at the root of every concept: to prevent your site configuration from being gigantic, you can split it up per concept.\r\nCreate a theme config that just exports the single site(...) instance for that concept. At the top level theme.config.tsx, you can import them all and just add them to the defineTheme() To combine everything, here is the example folder structure from all the examples:"}],"pageTitle":"Running multiple sites"},"/docs/guider/guides/advanced/header":{"sections":[{"heading":{"id":"header","depth":1,"text":"Header"},"content":"Learn about configuring the page header."},{"heading":{"id":"navigation","depth":2,"text":"Navigation"},"content":" If you are looking for ways to customise the navigation links in the header, you can  read more here."},{"heading":{"id":"git-hub-widget","depth":2,"text":"GitHub widget"},"content":" To showcase your GitHub repository with its stars and forks, you can configure a GitHub widget. Simply add your username or organisation followed by a slash and your repo name:"}],"pageTitle":"Header"},"/docs/guider/guides/advanced/footer":{"sections":[{"heading":{"id":"footer","depth":1,"text":"Footer"},"content":"Learn about configuring the two kinds of footers."},{"heading":{"id":"the-two-footers","depth":2,"text":"The two footers"},"content":" Let's get the confusion out of the way first. There are two kinds of footers: Content footer: This is the footer that is placed right below your content and doesn't go below the sidebar or table of contents. Page footer: This footer is placed below everything, even under the content footer if you have both enabled."},{"heading":{"id":"configuring-the-content-footer","depth":2,"text":"Configuring the content footer"},"content":" The content footer can hold 3 things: An \"Edit this page on GitHub\" link. Social links. Supported types: slack, discord, x, mastodon, github. Some text, by default it's a copyright notice. Here is an example of how to configure all of these, keep in mind that all fields are optional. Content footer is enabled by default, but in case you've customized it. It can be disabled/enabled even if you have the settings configured.\r\nThis can be done on any settings layout. Read more about  layout settings if you want."},{"heading":{"id":"configuring-the-page-footer","depth":2,"text":"Configuring the page footer"},"content":" The page footer can only hold text. However it is very easy to replace the footer with something custom. Read more about  customizing layout. Here is an example of how to configure the text: Page footer is disabled by default. It will be disabled until explicitly enabled in the layout settings. Read more about  layout settings if you want."}],"pageTitle":"Footer"},"/docs/guider/guides/advanced/deep-dive":{"sections":[{"heading":{"id":"deep-dive-concepts","depth":1,"text":"Deep-dive concepts"},"content":"What are sites, when to use multiple? What are directories, when to use them? What are layouts, when to use them? Ties between the theme and the pages (pages link to theme, theme doesnt link to pages). This article is a stub, please help by contributing to the docs."}],"pageTitle":"Deep-dive concepts"},"/docs/guider/guides/advanced/customizing-layout":{"sections":[{"heading":{"id":"customising-layout","depth":1,"text":"Customising layout"},"content":"The flexibilty of Guider really shines with its overwritable partials."},{"heading":{"id":"partials","depth":2,"text":"Partials"},"content":" Partials are sections of the interface, you can replace them and toggle them at will.\r\nHere are all possibilities: toc: The table of contents section. sidebar: The sidebar navigation menu. navigation: The header navigation menu. contentFooter: The content footer, placed right below content. pageEnd: The navigation links below the content, but above the content footer. pageFooter: The page footer, placed at the very bottom of the page. Disabled by default. logo: The logo, shown in the navigation bar and page footer. pageLayout: The entire page, cannot be turned off."},{"heading":{"id":"turning-partials-on-or-off","depth":2,"text":"Turning partials on or off"},"content":" You can turn off any partial on or off at  any layout settings level.\r\nSimply set the partial to true{:ts} or false{:ts}. Here is an example with the sidebar: This will turn off the sidebar for that settings level."},{"heading":{"id":"overwriting-the-partial","depth":2,"text":"Overwriting the partial"},"content":" You can replace any partial with your own component at  any layout settings level.\r\nJust set the partial to your component function - this will also enable it at the same time. Here is an example that overwrites the logo: If you are making a more complex partial that needs to display another partial, you can use the theme components (e.g. <GuiderSidebar />{:tsx}).\r\nFind all of them in the API reference tab."},{"heading":{"id":"using-layouts","depth":2,"text":"Using layouts"},"content":" Making layouts How to use them effectively This section is a stub, please help by contributing to the docs."},{"heading":{"id":"the-default-layouts","depth":2,"text":"The default layouts"},"content":" The default layouts will always be present. They can not be removed but they can be overwritten. Just add a layout with the same ID as the\r\ndefault layout of your choice. These are the defaults: default: The default layout of every page page: Layout for simple pages without sidebar, TOC or content footer. article: Layout for articles, without a sidebar or content footer. raw: Layout for when you just want to make a raw page without any of the other layouts."}],"pageTitle":"Customising layout"},"/docs/guider/api-reference/theme/social":{"sections":[{"heading":{"id":"social","depth":1,"text":"social()"},"content":"Social links, currently only usable in the content footer."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" The link of the social media account."},{"heading":{"id":"reference-options","depth":2,"text":"Reference - Options"},"content":" The options for this group. The type of the social media. Can be any of these: slack, mastodon, twitter, discord, github. The link of the social media account."}],"pageTitle":"social()"},"/docs/guider/api-reference/theme/site":{"sections":[{"heading":{"id":"site","depth":1,"text":"site()"},"content":"A site is an instance of root level configuration. If you need to modify navigation items, footers and alike, you'll be modifying a site. You can find more information on how to use sites effectively in  this guide."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" The ID of the site, this is used for referencing the site in other parts of your configuration, for example in _meta.json files. All options of the site. Extending of site templates, specified site templates get merged in the order they are passed in.\r\nMeaning that the last specified site will have priority over the sites earlier in the array. Site templates can be made with siteTemplate(), more info  found here. Read more about how to use templates in  this guide. List of items shown in the top navigation bar. You can only specify separator(), link() and component().\r\nRead more about those on their respective documentation pages. List of links to show in the tabs section of the header. You can only specify link() and component().\r\nRead more about those on their respective documentation pages. The tabs section of the header only shows up if there are items in the array. List of links to show in the dropdown section of the header. You can only specify link() and group() (groups can only hold other links).\r\nRead more about those on their respective documentation pages. The dropdown section of the header only shows up if there are items in the array. The meta data shown for all pages associated with the site. You can either specify an object for your meta data, which will follow the structure  defined here. Or you can pass in a function to render your own meta tags. Note that you do  must use  NextSeo when using this method. Read more about how to use this on  this page. A repository identifier, if specified a GitHub widget with the star count and fork count is displayed on the right side of the header. The identifier needs to be either {ORG_NAME}/{REPO_NAME} or {USER_NAME}/{REPO_NAME}. For example: mrjvs/neatojs. A text based logo to show top left of the header. If not specified, a placeholder is shown. You can also overwrite the logo, for example to show an image. Read more  about overwriting the logo. Text to display in the logo. Link to make the logo redirect to when clicked. If not specified, the logo is not clickable. The default layout to show for all pages associated with this site. Defaults to the layout with the ID default. List of layouts to add to the site. Pages and directories can specify which layout they want to use. The default included layouts are still added even if you add items to this list. You can change the default layouts by making a layout yourself with the same ID as the defaults. Read more about layouts in  this guide. The ID of the layout The layout settings for this layout, read more  about layout settings. The layout settings for this site, read more  about layout settings. The settings in this settings layer act as defaults for following layers. The settings are overriden by the layout settings and directory settings in that order if they exist. List of directories for this site, read more  about directories here. To have a sidebar, you will need at least one directory. Options for the content footer (the footer placed right below the content). The visibility of the content footer is not controlled by the settings. To control the visibility of the footer, check  the footer page for more info. Text shown in the content footer, by default it will be a copyright notice. List of social media links shown in the content footer. Check  the social() page for usage. Base URL of your Git repository, it will be used to show a \"Edit on GitHub\" link. Leave undefined if you don't want such a link. Check  this page for information on how to configure it. Options for the page footer (the footer placed at the very bottom of the page). The visibility of the page footer is not controlled by the settings. To control the visibility of the footer, check  the footer page for more info. Text shown in the page footer, it will be blank by default."}],"pageTitle":"site()"},"/docs/guider/api-reference/theme/site-template":{"sections":[{"heading":{"id":"site-template","depth":1,"text":"siteTemplate()"},"content":"Site templates can be used to make a reusuable instance of a site. You can use Site.extends{:ts} to utilize site templates."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" This accepts the same options as a normal site would, see  the site function for the reference for those options."}],"pageTitle":"siteTemplate()"},"/docs/guider/api-reference/theme/settings":{"sections":[{"heading":{"id":"layout-settings","depth":1,"text":"Layout settings"},"content":"Layout settings are the interface on which you modify your layout. All of these settings can be changed in any settings layer,  read more about settings layers."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"about-partials","depth":2,"text":"About partials"},"content":" Partial settings work slightly differently than other settings: To overwrite a partial, pass in a function (e.g. toc: () => <p>hello</p>{:tsx}). This will also  show the partial. Set a partial to true{:tsx} to  show the partial, but not change its contents (e.g. toc: true{:tsx}). Set a partial to false{:tsx} to  hide the partial, but not change its contents (e.g. toc: false{:tsx}). To use the settings from the upper layer. Just don't set the settings (or set it to undefined). You can read more about layout partials in the  layout settings guide. When you overwrite a partial, you can use useGuiderPage() to get the current page information. ( Read more here)."},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" The table of contents partial. Check  this section for information on how to use partials. The sidebar partial. Check  this section for information on how to use partials. The navigation/header partial. Check  this section for information on how to use partials. The content footer partial. Check  this section for information on how to use partials. The page footer partial. Check  this section for information on how to use partials. The page end partial. Check  this section for information on how to use partials. The logo partial. Check  this section for information on how to use partials. The page layout partial. Check  this section for information on how to use partials. This partial cannot be hidden, the layout wraps the entire site. the background pattern settings, set it flare to have a nice shard of light on your page background. Just like partials, you can use true and false to show or hide the partial. The layout colors, this is how you customize the theme colors. Discover the theme colors  in this guide."}],"pageTitle":"Layout settings"},"/docs/guider/api-reference/theme/separator":{"sections":[{"heading":{"id":"separator","depth":1,"text":"separator()"},"content":"A separator, simply draws a line inbetween navigation items."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":""}],"pageTitle":"separator()"},"/docs/guider/api-reference/theme/link":{"sections":[{"heading":{"id":"link","depth":1,"text":"link()"},"content":"A standard link for your navigation items. You can also nest links."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference-link-parameters","depth":2,"text":"Reference - Link parameters"},"content":" The title of the link. Where the link goes to. For example: /docs/guides/guide-a. Extra options for this link. All fields are optional. The icon to display in the navigation item, choose from  icones. If clicking the link should open a new tab or not. If the active page check should check the exact page and not its child routes. Useful in the case where you have a homepage in navigation. The display style of the link, can be default or star."},{"heading":{"id":"reference-link-options","depth":2,"text":"Reference - link options"},"content":" The options for this link. The title of the link. Where the link goes to. For example: /docs/guides/guide-a. The icon to display in the navigation item, choose from  icones. If clicking the link should open a new tab or not. If the active page check should check the exact page and not it's child routes. Useful in the case where you have a homepage in navigation. The display style of the link, can be default or star."},{"heading":{"id":"reference-nested-link-parameters","depth":2,"text":"Reference - nested link parameters"},"content":" The title of the link. Where the link goes to. For example: /docs/guides/guide-a. The child items of the nested link."},{"heading":{"id":"reference-nested-link-parameters-without-link","depth":2,"text":"Reference - nested link parameters without link"},"content":" The title of the link. The child items of the nested link."},{"heading":{"id":"reference-nested-link-options","depth":2,"text":"Reference - nested link options"},"content":" The options for this nested link. The title of the link. Where the link goes to. For example: /docs/guides/guide-a. The child items of the nested link. The icon to display in the navigation item, choose from  icones. If clicking the link should open a new tab or not. If the active page check should check the exact page and not it's child routes. Useful in the case where you have a homepage in navigation. The display style of the link, can be default or star."}],"pageTitle":"link()"},"/docs/guider/api-reference/theme/group":{"sections":[{"heading":{"id":"group","depth":1,"text":"group()"},"content":"A navigation group, can be used to categorize or group links."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" The title of the group. The navigation items inside of this group, the acceptable item types depends on which navigation area the group is in."},{"heading":{"id":"reference-options","depth":2,"text":"Reference - Options"},"content":" The options for this group. The title of the group. The navigation items inside of this group, the acceptable item types depends on which navigation area the group is in."}],"pageTitle":"group()"},"/docs/guider/api-reference/theme/directory":{"sections":[{"heading":{"id":"directory","depth":1,"text":"directory()"},"content":"Directories hold a site's sidebar navigation items."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" The ID of the directory - Can be anything and is only used for referencing in meta files or similar. All options of the directory. The default layout to show for all pages associated with this directory. Defaults to the layout for the site. The layout settings for this directory, read more  about layout settings. The settings in this settings layer are applied last - overriding settings defined in sites and layouts. List of links to show in the sidebar. You can specify link(), link.nested(), separator(), component(), group() (groups can hold all other types except for more groups). Read more about those on their respective documentation pages."}],"pageTitle":"directory()"},"/docs/guider/api-reference/theme/define-theme":{"sections":[{"heading":{"id":"define-theme","depth":1,"text":"defineTheme()"},"content":"The only purpose defineTheme() has is to make a theme configuration. The output of this function must be\r\nthe default export of the theme file."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" To make a theme, you can either provide a site object or a list of SiteComponent.\r\nThe site objects can be made using  the site function. The same page also lists the options for a site. If you use a site object, the site ID will be set to main."}],"pageTitle":"defineTheme()"},"/docs/guider/api-reference/theme/component":{"sections":[{"heading":{"id":"component","depth":1,"text":"component()"},"content":"Allows using a custom component for a navigation item. Useful if you want to add custom functionality to your sidebars (or other navigation structures)."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" A function that returns JSX. You can run React hooks in here."},{"heading":{"id":"reference-options","depth":2,"text":"Reference - Options"},"content":" Options for this custom component item. A function that returns JSX. You can run React hooks in here."}],"pageTitle":"component()"},"/docs/guider/api-reference/setup/guider":{"sections":[{"heading":{"id":"guider","depth":1,"text":"guider()"},"content":"This function is the way you inject Guider into NextJS. You can use its options\r\nto change how Guider behaves in the compile step."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" Options for the redirect. The location of the theme file, the theme file is used to configure almost everything about guider. A list where you can specify  remark plugins to use on top of the default list of plugins. Use it to add new features to your markdown files. A list where you can specify  remark plugins to use  instead of the default Guider plugins. Use it to overwrite how markdown parsing works.  Be aware that this will disable a lot of the default features of Guider, use at your own risk. Use extraRemarkPlugins instead if you want to add extra plugins without breaking existing functionality. A list where you can specify  Shiki transformers to use on top of the default transformers. Use it to add new features to syntax highlighting in codeblocks. A list where you can specify  Shiki transformers to use  instead of the default Guider transformers. Use it to overwrite how syntax highlighting works in Guider.  Be aware that this will disable a lot of the default features of Guider, use at your own risk. Use extraShikiTransformers instead if you want to add extra transformers without breaking existing functionality."}],"pageTitle":"guider()"},"/docs/guider/api-reference/meta/structure":{"sections":[{"heading":{"id":"structure-of-meta-json","depth":1,"text":"Structure of _meta.json"},"content":"Find out the structure of the _meta.json file."},{"heading":{"id":"the-file","depth":2,"text":"The file"},"content":" The _meta.json file can created and placed in any folder in the /pages directory. The meta file will be applied to all routes and child routes of the folder. All fields inside the meta file can also be specified in the Frontmatter of a page, so you don't need to make a meta file for a single page."},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" Which site the page(s) belong to, defaults to the first (or only) site. Which directory the page(s) is in, defaults to the first directory of the selected site. Which layout the page(s) should be displayed with, defaults to the layout with ID default."}],"pageTitle":"Structure of _meta.json"},"/docs/guider/api-reference/functions/use-guider":{"sections":[{"heading":{"id":"use-guider","depth":1,"text":"useGuider()"},"content":"This React hook is the way to hook into Guider internals. It can give you information about the entire Guider instance."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" Optional meta config overwrite, it will fall back on what is configured in _meta.json files. This does  not account for FrontMatter config. Use useGuiderPage() ( Check here) if you need Frontmatter accounted for. The context for a Guider page. The currently active site. The ID of the site, this is used for referencing the site in other parts of your configuration, for example in _meta.json files. List of items shown in the top navigation bar. List of links to show in the tabs section of the header. List of links to show in the dropdown section of the header. You can only specify link() and group() (groups can only hold other links). The meta data shown for all pages associated with the site. A repository identifier, if specified a GitHub widget with the star count and fork count is displayed on the right side of the header. The identifier needs to be either {ORG_NAME}/{REPO_NAME} or {USER_NAME}/{REPO_NAME}. For example: mrjvs/neatojs. A text based logo to show top left of the header. If not specified, a placeholder is shown. You can also overwrite the logo, for example to show an image. Read more  about overwriting the logo. Text to display in the logo. Link to make the logo redirect to when clicked. If not specified, the logo is not clickable. The default layout to show for all pages associated with this site. List of layouts for this site. The ID of the layout. The populated layout settings for this layout, read more  about layout settings. This is preresolved, but you shouldn't use it directly. Use the returned settings on GuiderContext.settings instead. The layout settings for this site, read more  about layout settings. This is preresolved, but you shouldn't use it directly. Use the returned settings on GuiderContext.settings instead. List of directories for this site, read more  about directories here. The ID of the directory. The ID of the layout that needs to be shown for pages in this directory. The populated layout settings for this directory, read more  about layout settings. This is preresolved, but you shouldn't use it directly. Use the returned settings on GuiderContext.settings instead. List of links to show in the sidebar. Options for the content footer (the footer placed right below the content). The visibility of the content footer is not controlled by the settings. To control the visibility of the footer, check  the footer page for more info. Text shown in the content footer, by default it will be a copyright notice. List of social media links shown in the content footer. Check  the social() page for usage. Base URL of your Git repository, it will be used to show a \"Edit on GitHub\" link. Leave undefined if you don't want such a link. Check  this page for information on how to configure it. Options for the page footer (the footer placed at the very bottom of the page). The visibility of the page footer is not controlled by the settings. To control the visibility of the footer, check  the footer page for more info. Text shown in the page footer, it will be blank by default. The currently active directory. The ID of the directory The ID of the layout that needs to be shown for pages in this directory. The populated layout settings for this directory, read more  about layout settings. This is preresolved, but you shouldn't use it directly. Use the returned settings on GuiderContext.settings instead. List of links to show in the sidebar. The currently active layout. The ID of the layout The populated layout settings for this layout, read more  about layout settings. This is preresolved, but you shouldn't use it directly. Use the returned settings on GuiderContext.settings instead. The fully populated layout settings, all defaults are merged into it (so no optional properties). Read more  about layout settings. A list of the contents of your _meta.json files. The site path that this _meta.json file belongs to. The resolved meta file configuration, it accounts for all meta files that are above it. So you can use this if it's the most specific path. Read more  about meta files. The raw contents of the _meta.json file. Can be used for custom properties. The navigational context of the page, use it to get the current links in the sidebar. The previous page link, according to the order of the sidebar links. It can be null The current page link. It can be null if it isn't present in the sidebar. The next page link, according to the order of the sidebar links. It can be null."}],"pageTitle":"useGuider()"},"/docs/guider/api-reference/functions/use-guider-page":{"sections":[{"heading":{"id":"use-guider-page","depth":1,"text":"useGuiderPage()"},"content":"This React hook is the way to hook into Guider internals for the current page."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" The context for a Guider page, including the page meta data. The currently active site. See  the useGuider() page for more info. The currently active directory. See  the useGuider() page for more info. The currently active layout. See  the useGuider() page for more info. The fully populated layout settings, all defaults are merged into it (so no optional properties). Read more  about layout settings. See  the useGuider() page for more info. A list of the contents of your _meta.json files. See  the useGuider() page for more info. The navigational context of the page, use it to get the current links in the sidebar. See  the useGuider() page for more info. Data for the current page content. The metadata for this page. The site field in the Frontmatter. The directory field in the Frontmatter. The layout field in the Frontmatter. The title field in the Frontmatter. The description field in the Frontmatter. The headings in the page content in order of appearance. The depth of the heading. Equals to the amount of hashtags of the heading. Text content of the heading. Extra data associated with the heading. The ID of the heading. An first paragraph of the page content."}],"pageTitle":"useGuiderPage()"},"/docs/guider/api-reference/functions/create-redirect":{"sections":[{"heading":{"id":"create-redirect","depth":1,"text":"createRedirect()"},"content":"This utility function is an easy way to make redirects work in static site generation mode. When it's used, it creates a dummy page that redirects when loaded."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" Options for the redirect. Where the user gets redirected to when it renders this page."}],"pageTitle":"createRedirect()"},"/docs/guider/api-reference/functions/create-not-found-page":{"sections":[{"heading":{"id":"create-not-found-page","depth":1,"text":"createNotFoundPage()"},"content":"This function creates a premade 404 page. You don't have to use this 404 page, it does nothing special. Feel free to make your own. This has be put in /pages/404.tsx to work, if you use a different location it won't work."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":""}],"pageTitle":"createNotFoundPage()"},"/docs/guider/api-reference/components/guider-toc":{"sections":[{"heading":{"id":"guider-toc","depth":1,"text":"<GuiderToc />"},"content":"React component that will show the currently configured table of contents. It respects the configured toc in the layout settings. Read more  about partials. Will show one of: Nothing if the table of contents is set to be hidden. The default table of contents with the configured settings. The custom component if the table of contents has been overriden in the partials."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":""}],"pageTitle":"<GuiderToc />"},"/docs/guider/api-reference/components/guider-sidebar":{"sections":[{"heading":{"id":"guider-sidebar","depth":1,"text":"<GuiderSidebar />"},"content":"React component that will show the currently configured sidebar partial. It respects the configured sidebar in the layout settings. Read more  about partials. Will show one of: Nothing if the sidebar is set to be hidden. The default sidebar with the configured settings. The custom component if the sidebar has been overriden in the partials."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":""}],"pageTitle":"<GuiderSidebar />"},"/docs/guider/api-reference/components/guider-page-footer":{"sections":[{"heading":{"id":"guider-page-footer","depth":1,"text":"<GuiderPageFooter />"},"content":"React component that will show the currently configured page footer. It respects the configured pageFooter in the layout settings. Read more  about partials. Will show one of: Nothing if the page footer is set to be hidden. The default page footer with the configured settings. The custom component if the page footer has been overriden in the partials."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":""}],"pageTitle":"<GuiderPageFooter />"},"/docs/guider/api-reference/components/guider-page-end":{"sections":[{"heading":{"id":"guider-page-end","depth":1,"text":"<GuiderPageEnd />"},"content":"React component that will show the currently configured page end. It respects the configured pageEnd in the layout settings. Read more  about partials. Will show one of: Nothing if the page end is set to be hidden. The default page end with the configured settings. The custom component if the page end has been overriden in the partials."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":""}],"pageTitle":"<GuiderPageEnd />"},"/docs/guider/api-reference/components/guider-logo":{"sections":[{"heading":{"id":"guider-logo","depth":1,"text":"<GuiderLogo />"},"content":"React component that will show the currently configured logo. It respects the configured logo in the layout settings. Read more  about partials. Will show one of: Nothing if the logo is set to be hidden. The default logo with the configured settings. The custom component if the logo has been overriden in the partials."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":""}],"pageTitle":"<GuiderLogo />"},"/docs/guider/api-reference/components/guider-layout":{"sections":[{"heading":{"id":"guider-layout","depth":1,"text":"<GuiderLayout />"},"content":"React component that will show the currently configured layout partial. It respects the configured layout in the layout settings. Read more  about partials. The primary use of this component is to make a non-MDX page look like an MDX page. Don't use it if you're already in an MDX File. Will show one of: The default layout with the configured settings. The custom component if the layout has been overriden in the partials."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":" The props for this component. Every prop is optional. The meta configuration, see  the meta file reference for the contents. An excerpt of the page, used in meta tags for SEO. The headings of the page, first depth 1 heading is used as page title for SEO. This is also to display the table of contents. The depth of the heading. Equals to the amount of hashtags of the heading. Text content of the heading. Extra data associated with the heading. The ID of the heading. The children of the React component, it will be displayed as the page contents."}],"pageTitle":"<GuiderLayout />"},"/docs/guider/api-reference/components/guider-header":{"sections":[{"heading":{"id":"guider-header","depth":1,"text":"<GuiderHeader />"},"content":"React component that will show the currently configured navigation partial. It respects the configured navigation in the layout settings. Read more  about partials. Will show one of: Nothing if the navigation bar is set to be hidden. The default navigation bar with the configured settings. The custom component if the navigation bar has been overriden in the partials."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":""}],"pageTitle":"<GuiderHeader />"},"/docs/guider/api-reference/components/guider-content-footer":{"sections":[{"heading":{"id":"guider-content-footer","depth":1,"text":"<GuiderContentFooter />"},"content":"React component that will show the currently configured content footer. It respects the configured contentFooter in the layout settings. Read more  about partials. Will show one of: Nothing if the content footer is set to be hidden. The default content footer with the configured settings. The custom component if the content footer has been overriden in the partials."},{"heading":{"id":"example","depth":2,"text":"Example"},"content":""},{"heading":{"id":"reference","depth":2,"text":"Reference"},"content":""}],"pageTitle":"<GuiderContentFooter />"},"/docs/guider/guides/getting-started/migration/from-nextra":{"sections":[{"heading":{"id":"migrating-from-nextra","depth":1,"text":"Migrating from Nextra"},"content":"Migrating can be a long journey, this guide aims to create a clear set of steps to move to Guider."},{"heading":{"id":"compatability-table","depth":2,"text":"Compatability table"},"content":" Feature Nextra Guider MDX based pages ✓✓I18N support ✓𐄂 Search bar ✓𐄂 Dark mode ✓✓Light mode ✓𐄂 Banners ✓𐄂 SEO & custom meta tags ✓✓Customizable layouts ✓✓Custom navigation links ✓✓Component: Callout ✓✓Component: Tabs ✓✓Component: Cards ✓𐄂 Component: Steps ✓✓Component: FileTree ✓𐄂 Component: Bleed ✓𐄂 Npm2Yarn integration ✓✓Edit on GitHub link ✓✓Collapsable sidebar ✓𐄂"},{"heading":{"id":"migration-steps","depth":2,"text":"Migration steps"},"content":" Make a guider project: Make a new guider project by following  this guide. Copy your MDX files over: Copy over all MDX files into the pages directory of the new project. Remove or replace unsupported components: Not all components are supported by Guider. Check the compatibility table above. Migrate _meta.json files: In Nextra, meta files are for storing navigation structures. In Guider this is done in the theme config.  Check out this guide. Migrate the theme config: Many Nextra theme configuration options are also possible in Guider. Check out the compatibility table above. Finished: That should be everything to migrate to Guider, congratulations!"}],"pageTitle":"Migrating from Nextra"},"/docs/guider/guides/getting-started/migration/from-mintlify":{"sections":[{"heading":{"id":"migrating-from-mintlify","depth":1,"text":"Migrating from Mintlify"},"content":"Migrating can be a long journey, this guide aims to create a clear set of steps to move to Guider."},{"heading":{"id":"compatability-table","depth":2,"text":"Compatability table"},"content":" Feature Mintlify Guider MDX based pages ✓✓Custom CSS/JS ✓✓Search bar ✓𐄂 Dark mode ✓✓Light mode ✓𐄂 Banners ✓𐄂 Versions ✓✓ (through dropdown) Groups/Tabs ✓✓Redirects ✓✓SEO & custom meta tags ✓✓Sitemaps ✓𐄂 Custom domain ✓✓ (you host it yourself) API playground / openAPI ✓𐄂 Snippets ✓𐄂 (use custom components instead) integrations ✓𐄂 (you can use NextJS libraries)"},{"heading":{"id":"migration-steps","depth":2,"text":"Migration steps"},"content":" Make a guider project: Make a new guider project by following  this guide. Copy your MDX files over: Copy over all MDX files into the pages directory of the new project. Remove or replace unsupported components: Not all components are supported by Guider. Check the compatibility table above. Migrate mint.json file: In Mintlify, the json file is used for all configuration. In Guider this is done in the theme config.  Check out this guide. Update frontmatter: Mintlify has some configuration in the frontmatter. Remove the unsupported properties or move them to the theme config. Finished: That should be everything to migrate to Guider, congratulations!"}],"pageTitle":"Migrating from Mintlify"},"/docs/guider/guides/getting-started/migration/from-docus":{"sections":[{"heading":{"id":"migrating-from-docus","depth":1,"text":"Migrating from Docus"},"content":"Migrating can be a long journey, this guide aims to create a clear set of steps to move to Guider."},{"heading":{"id":"compatability-table","depth":2,"text":"Compatability table"},"content":" Feature Docus Guider Markdown based pages ✓✓Search bar ✓𐄂 Dark mode ✓✓Light mode ✓𐄂 SEO & custom meta tags ✓✓Redirects ✓✓Layouts ✓✓Component: Alert ✓✓ (called callouts) Component: Badge ✓𐄂 Component: BlockHero ✓✓ (Looks different) Component: ButtonLink ✓✓ (called Button) Component: Callouts ✓𐄂 (despite similar name, not supported) Component: Card ✓✓ (part of the landing page) Component: CardGrid ✓✓ (part of the landing page) Component: CodeGroup ✓✓Component: CodeBlock ✓✓ (called Frame) Component: CopyButton ✓𐄂 Component: Icon ✓𐄂 Component: List ✓𐄂 Component: Sandbox ✓𐄂 Component: Terminal ✓𐄂 Component: VideoPlayer ✓𐄂"},{"heading":{"id":"migration-steps","depth":2,"text":"Migration steps"},"content":" Make a guider project: Make a new guider project by following  this guide. Copy your markdown files over: Copy over all Markdown files into the pages directory of the new project. Remove the numbers prefixed on front of your files and folders. The order is now in the theme config. Replace the component directives with MDX React components. Update frontmatter to set the layout ID instead of modifying the layout settings directly. See  this page. Replace title in the frontmatter to a link in the theme config. Migrate _dir.yml files: dir files don't exist in Guider. Check these steps: title goes in a group() in the theme config. replace navigation.redirect with a createRedirect() in a index.tsx title template can be set globally, not a per directory basis. Migrate app.config.ts: The settings in Guider go into the theme config, along with your sidebar contents. Migrate vue components to react: Guider is based in react, so to have custom components work you will need to port them. Finished: That should be everything to migrate to Guider, congratulations!"}],"pageTitle":"Migrating from Docus"},"/docs/guider/guides/config/common/multi-docs":{"sections":[{"heading":{"id":"multiple-documentation-sites","depth":1,"text":"Multiple documentation sites"},"content":"Unlike a lot of traditional documentation tools where you have to create multiple instances of the documentation for different sites (Whether that be versions, products, etc), in Guider you can create multiple \"sites\" within the same documentation. This means you do not have to maintain multiple documentation instances, and updating styling and common elements like headers and footers is much easier. There are many use cases when you might want to create multiple sites within the same documentation. For example, you might want to create a separate site for each product, or you might want to create a separate site for each version of a product. The NeatoJS documentation is a good example of this, where we have a separate site for each library (Take a look at the dropdown at the top left!). Although sites can be good for lots of use cases, they are not suited for everything! Sites should only be used when you want to have a completely separate documentation. For example, if you would like a \"Guide\" and \"API Reference\", using directories and  tabs would be a better option."},{"heading":{"id":"adding-multiple-sites-to-a-project","depth":2,"text":"Adding multiple sites to a project"},"content":" Sites are defined in Guider by adding a site to the defineTheme array in the theme.config.tsx file. Each site can have its own configuration including name, tabs, layouts and content."},{"heading":{"id":"making-pages-and-folders-use-a-specific-site","depth":2,"text":"Making pages and folders use a specific site"},"content":" Once you have a set of pages made for a site, you will have to make sure that Guider knows which site to assign to your pages.\r\nYou can do this by making a _meta.json for your directory with your pages. Inside it, you can specify the site: With this new file, all pages in the folder with the meta file (in this case it's /pages/my-site-b) and it's nested pages will belong to the site specified."}],"pageTitle":"Multiple documentation sites"},"/docs/guider/guides/config/common/api-ref":{"sections":[{"heading":{"id":"api-reference-docs","depth":1,"text":"API reference + Docs"},"content":"A common requirement for expansive documentation sites is having both guides and an API reference. API reference is a lot more technical and usually isn't very helpful for beginners, but massively helpful if you know the library already and want to fact check something. The guides is almost the opposite: It's very friendly for beginners, but lacks the completeness of an API reference."},{"heading":{"id":"adding-the-two-sections-to-your-project","depth":2,"text":"Adding the two sections to your project"},"content":" The recommended way to add an API reference next to your guides is to use tabs. Tabs is a configuration option for a Guider site that allows for easy switching between two contexts."},{"heading":{"id":"adding-the-pages-to-sub-directories","depth":3,"text":"Adding the pages to sub-directories"},"content":" First, you have to make sure that your pages are divided in sub-directories. Like so: /pages/guides All your MDX files or pages for your guides /pages/api All your MDX files or pages for your API reference"},{"heading":{"id":"configuring-your-tabs","depth":3,"text":"Configuring your tabs"},"content":" Your site configuration needs to be split into two directory() instances and need to have the configured tabs. Like so:"},{"heading":{"id":"creating-meta-files","depth":3,"text":"Creating meta files"},"content":" To make your pages tied to your directory() instances (and tabs), you'll need to make two meta files for each folder."}],"pageTitle":"API reference + Docs"}}